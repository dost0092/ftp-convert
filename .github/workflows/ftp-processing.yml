name: FTP File Processing
on:
  schedule:
    # Check every 15 minutes for new files
    - cron: '*/15 * * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  process-ftp-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests openpyxl pandas tqdm ftplib

    - name: Create environment file
      run: |
        cat > .env << EOF
        EMAIL_USER=${{ secrets.EMAIL_USER }}
        EMAIL_APP_PASSWORD=${{ secrets.EMAIL_APP_PASSWORD }}
        FTP_REMOTE_DIR=/katanaPIM/dropfiles/input_files
        FTP_UPLOAD_DIR=/katanaPIM/dropfiles/output_files
        FTP_PROCESSED_DIR=/katanaPIM/dropfiles/processed
        FTP_HOST=img.leenweb.app
        FTP_USER=${{ secrets.FTP_USER }}
        FTP_PASS=${{ secrets.FTP_PASS }}
        EOF

    - name: Download FTP files recursively
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        import os
        from datetime import datetime
        
        def download_ftp_directory(ftps, remote_path, local_path):
            '''Recursively download FTP directory'''
            try:
                ftps.cwd(remote_path)
                os.makedirs(local_path, exist_ok=True)
                
                items = ftps.nlst()
                for item in items:
                    if item in ['.', '..']:
                        continue
                    
                    try:
                        # Try to enter subdirectory
                        ftps.cwd(item)
                        # It's a directory - recurse
                        download_ftp_directory(ftps, f'{remote_path}{item}/', f'{local_path}{item}/')
                        ftps.cwd('..')
                    except Exception:
                        # It's a file - download it
                        print(f'Downloading: {remote_path}{item}')
                        with open(f'{local_path}{item}', 'wb') as f:
                            ftps.retrbinary(f'RETR {item}', f.write)
            except Exception as e:
                print(f'Error downloading {remote_path}: {e}')
        
        # Connect securely to FTP
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        print('✅ Securely connected to FTP')
        
        # Create local directories
        os.makedirs('input_files', exist_ok=True)
        os.makedirs('converted-files', exist_ok=True)
        
        # Download entire input_files directory recursively
        download_ftp_directory(ftps, '/katanaPIM/dropfiles/input_files/', 'input_files/')
        
        # List downloaded files
        print('Downloaded files:')
        for root, dirs, files in os.walk('input_files'):
            for file in files:
                print(f'  {os.path.join(root, file)}')
        
        ftps.quit()
        "

    - name: Check if new input files exist
      id: check_files
      run: |
        # Count files in input_files (excluding ART_DOCS for decision, but we still process them)
        file_count=$(find input_files -type f -not -path '*/ART_DOCS/*' | wc -l)
        art_docs_count=$(find input_files/ART_DOCS -type f 2>/dev/null | wc -l)
        
        echo "Main input files: $file_count"
        echo "ART_DOCS files: $art_docs_count"
        
        if [ $file_count -gt 0 ]; then
          echo "files_exist=true" >> $GITHUB_OUTPUT
          echo "new_files_found=true" >> $GITHUB_OUTPUT
        else
          echo "files_exist=false" >> $GITHUB_OUTPUT
          echo "new_files_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Archive existing output files before processing
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        import os
        from datetime import datetime
        
        def move_directory(ftps, from_path, to_path):
            '''Move entire directory recursively'''
            try:
                ftps.cwd(from_path)
                items = ftps.nlst()
                
                # Create target directory
                try:
                    ftps.mkd(to_path)
                except:
                    pass
                
                for item in items:
                    if item in ['.', '..']:
                        continue
                    
                    try:
                        ftps.cwd(item)
                        # It's a directory - recurse
                        move_directory(ftps, f'{from_path}{item}/', f'{to_path}{item}/')
                        # Remove empty source directory
                        try:
                            ftps.rmd(f'{from_path}{item}')
                        except:
                            pass
                    except Exception:
                        # It's a file - move it
                        try:
                            ftps.rename(f'{from_path}{item}', f'{to_path}{item}')
                            print(f'Moved: {from_path}{item} -> {to_path}{item}')
                        except Exception as e:
                            print(f'Error moving {from_path}{item}: {e}')
            except Exception as e:
                print(f'Error in move_directory {from_path}: {e}')
        
        # Connect securely
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
        
        # Check if output_files has content (excluding processed folder)
        try:
            ftps.cwd('/katanaPIM/dropfiles/output_files')
            items = [item for item in ftps.nlst() if item not in ['.', '..', 'processed']]
            
            if items:
                print('Archiving existing output files...')
                archive_folder = f'/katanaPIM/dropfiles/output_files/processed/output_{timestamp}'
                
                # Move each item to archive
                for item in items:
                    try:
                        ftps.rename(
                            f'/katanaPIM/dropfiles/output_files/{item}',
                            f'{archive_folder}/{item}'
                        )
                        print(f'Archived: {item}')
                    except Exception as e:
                        print(f'Error archiving {item}: {e}')
            else:
                print('No existing output files to archive')
                
        except Exception as e:
            print(f'Error checking output_files: {e}')
        
        ftps.quit()
        "

    - name: Run Python conversion script
      if: steps.check_files.outputs.new_files_found == 'true'
      run: |
        # Copy all input files to current directory for processing
        cp -r input_files/* .
        
        # Run your conversion script
        python convert.py
        
        # List generated output files
        echo "Generated output files:"
        find converted-files -type f

    - name: Upload new output files to FTP
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        import os
        
        def upload_directory(ftps, local_path, remote_path):
            '''Recursively upload directory to FTP'''
            try:
                # Try to create remote directory
                try:
                    ftps.mkd(remote_path)
                except:
                    pass
                
                ftps.cwd(remote_path)
                
                for item in os.listdir(local_path):
                    local_item = os.path.join(local_path, item)
                    if os.path.isdir(local_item):
                        # Recursively upload subdirectory
                        upload_directory(ftps, local_item, f'{remote_path}{item}/')
                    else:
                        # Upload file
                        with open(local_item, 'rb') as f:
                            ftps.storbinary(f'STOR {item}', f)
                        print(f'Uploaded: {remote_path}{item}')
            except Exception as e:
                print(f'Error uploading {local_path} to {remote_path}: {e}')
        
        # Connect securely
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        # Upload converted files to output_files
        if os.path.exists('converted-files'):
            upload_directory(ftps, 'converted-files', '/katanaPIM/dropfiles/output_files/')
        else:
            print('No converted-files directory found')
        
        ftps.quit()
        "

    - name: Archive processed input files
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        import os
        from datetime import datetime
        
        def move_directory(ftps, from_path, to_path):
            '''Move entire directory recursively'''
            try:
                ftps.cwd(from_path)
                items = ftps.nlst()
                
                # Create target directory
                try:
                    ftps.mkd(to_path)
                except:
                    pass
                
                for item in items:
                    if item in ['.', '..']:
                        continue
                    
                    try:
                        ftps.cwd(item)
                        # It's a directory - recurse
                        move_directory(ftps, f'{from_path}{item}/', f'{to_path}{item}/')
                        # Remove empty source directory
                        try:
                            ftps.rmd(f'{from_path}{item}')
                        except:
                            pass
                    except Exception:
                        # It's a file - move it
                        try:
                            ftps.rename(f'{from_path}{item}', f'{to_path}{item}')
                            print(f'Moved: {from_path}{item} -> {to_path}{item}')
                        except Exception as e:
                            print(f'Error moving {from_path}{item}: {e}')
            except Exception as e:
                print(f'Error in move_directory {from_path}: {e}')
        
        # Connect securely
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
        archive_folder = f'/katanaPIM/dropfiles/input_files/processed/input_{timestamp}'
        
        print('Archiving processed input files...')
        
        # Move all content from input_files to archive (excluding processed folder)
        try:
            ftps.cwd('/katanaPIM/dropfiles/input_files')
            items = [item for item in ftps.nlst() if item not in ['.', '..', 'processed']]
            
            for item in items:
                try:
                    ftps.rename(
                        f'/katanaPIM/dropfiles/input_files/{item}',
                        f'{archive_folder}/{item}'
                    )
                    print(f'Archived: {item}')
                except Exception as e:
                    print(f'Error archiving {item}: {e}')
                    
        except Exception as e:
            print(f'Error archiving input files: {e}')
        
        ftps.quit()
        "

    - name: Send success email notification
      if: steps.check_files.outputs.new_files_found == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USER }}
        password: ${{ secrets.EMAIL_APP_PASSWORD }}
        subject: 'Files are exported - KatanaPIM Processing Complete'
        to: sajid.mbp@gmail.com
        from: GitHub Actions
        body: |
          The file conversion has been completed successfully!
          
          📁 Output files are available at:
          https://img.leenweb.app/katanaPIM/dropfiles/output_files/
          
          These files will remain available until the next processing run.
          
          Input files have been archived to:
          /input_files/processed/input_[timestamp]/
          
          Previous output files have been archived to:
          /output_files/processed/output_[timestamp]/
          
          Best regards,
          GitHub Actions Automation

    - name: Send no files notification
      if: steps.check_files.outputs.new_files_found == 'false'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USER }}
        password: ${{ secrets.EMAIL_APP_PASSWORD }}
        subject: 'No New Files - KatanaPIM Check'
        to: sajid.mbp@gmail.com
        from: GitHub Actions
        body: |
          The scheduled check ran but no new files were found in the input directory.
          
          Next check will be in 15 minutes.
          
          Current input files have already been processed and are archived in:
          /input_files/processed/
          
          Current output files remain available at:
          https://img.leenweb.app/katanaPIM/dropfiles/output_files/

    - name: Clean up local files
      if: always()
      run: |
        rm -rf input_files converted-files
        echo "Local files cleaned up"