name: FTP File Processing
on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:  # Allow manual triggering

env:
  FTP_HOST: img.leenweb.app
  FTP_USER: support.leenweb.nl
  FTP_PASS: ${{ secrets.FTP_PASS }}
  EMAIL_USER: ${{ secrets.EMAIL_USER }}
  EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}

jobs:
  process-ftp-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests openpyxl pandas tqdm

    - name: Install FTP tools
      run: |
        sudo apt-get update
        sudo apt-get install -y lftp

    - name: Create directories
      run: |
        mkdir -p input_files output_files converted-files

    - name: Create lftp configuration
      run: |
        cat > .lftprc << EOF
        set ftp:ssl-allow no
        set ssl:verify-certificate no
        EOF

    - name: Check for new files on FTP
      id: check-files
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        # Get list of current files in input_files
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          ls -la
        " > current_files.txt
        
        echo "=== Files in /input_files ==="
        cat current_files.txt
        
        # Check if there are any input files (excluding processed folder)
        if grep -q -E "art.*in|atk.*in|mvm.*in|uic.*in|stc.*in" current_files.txt && ! grep -q "processed" current_files.txt; then
          echo "new_files=true" >> $GITHUB_OUTPUT
          echo "✅ New files detected - will process"
        else
          echo "new_files=false" >> $GITHUB_OUTPUT
          echo "❌ No new files found"
        fi

    - name: Download files from FTP
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        echo "📥 Downloading files at: $TIMESTAMP"
        
        # Download all files from /input_files (excluding processed folder)
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          mirror --verbose --exclude processed/ . ./input_files/
        "
        
        echo "=== Downloaded files ==="
        ls -la input_files/

    - name: Archive previous output files to /output_files/processed
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        # Check if there are existing output files to archive
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /output_files
          ls -la
        " > output_check.txt
        
        echo "=== Current output files ==="
        cat output_check.txt
        
        # Archive existing output files if they exist (excluding processed folder)
        if grep -q -v -E "^d|processed" output_check.txt && ! grep -q "total 0" output_check.txt; then
          echo "📦 Archiving previous output files to /output_files/processed/output_files_${TIMESTAMP}/"
          
          # Create processed directory if it doesn't exist
          lftp -c "
            set ftp:ssl-allow no
            set ssl:verify-certificate no
            open -u $FTP_USER,$FTP_PASS $FTP_HOST
            cd /output_files
            mkdir -p processed
            cd processed
            mkdir -p output_files_${TIMESTAMP}
          "
          
          # Move all files (except processed folder) to archive
          lftp -c "
            set ftp:ssl-allow no
            set ssl:verify-certificate no
            open -u $FTP_USER,$FTP_PASS $FTP_HOST
            cd /output_files
            mv * processed/output_files_${TIMESTAMP}/ 2>/dev/null || true
          "
          
          echo "✅ Output files archived"
        else
          echo "📭 No previous output files to archive"
        fi

    - name: Archive input files to /input_files/processed
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        echo "📦 Archiving input files to /input_files/processed/input_files_${TIMESTAMP}/"
        
        # Create processed directory structure
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          mkdir -p processed
          cd processed
          mkdir -p input_files_${TIMESTAMP}
        "
        
        # Move all input files (excluding processed folder) to archive
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          mv * processed/input_files_${TIMESTAMP}/ 2>/dev/null || true
        "
        
        echo "✅ Input files archived"

    - name: Run Python conversion script
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        echo "🔄 Running conversion script..."
        
        # Copy downloaded files to current directory for processing
        cp -r input_files/* . || true
        
        # List files to verify
        echo "=== Files available for processing ==="
        ls -la | grep -E "art.*in|atk.*in|mvm.*in|uic.*in|stc.*in" || echo "No matching files found"
        
        # Run the conversion script (replace with your actual script name)
        python your_script_name.py
        
        echo "✅ Conversion completed successfully"
        
        # Show generated files
        echo "=== Generated output files ==="
        find converted-files -type f | head -20

    - name: Upload output files to FTP
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        echo "⬆️ Uploading output files to /output_files/"
        
        # Upload all converted files to /output_files directory
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /
          mirror -R -v ./converted-files/ /output_files/
        "
        
        echo "✅ Output files uploaded to FTP"

    - name: Send completion email
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        # Get list of processed files for the email
        PROCESSED_FILES=$(ls input_files/ | grep -E "art.*in|atk.*in|mvm.*in|uic.*in|stc.*in" | tr '\n' ',' | sed 's/,$//')
        
        cat > email_body.txt << EOF
Subject: 🚀 KatanaPIM Export Completed - $TIMESTAMP

Hello,

Your file conversion has been completed successfully!

📊 PROCESSING SUMMARY:
• Input files processed: $PROCESSED_FILES
• Process completed: $(date)
• Archive timestamp: ${TIMESTAMP}

📁 FILE LOCATIONS:

📍 CURRENT OUTPUT FILES (Ready for Import):
https://img.leenweb.app/katanaPIM/dropfiles/output_files/

📍 ARCHIVED INPUT FILES:
/input_files/processed/input_files_${TIMESTAMP}/

📍 ARCHIVED PREVIOUS OUTPUT FILES: 
/output_files/processed/output_files_${TIMESTAMP}/

🔗 IMPORT INSTRUCTIONS:
1. Access the output files at: https://img.leenweb.app/katanaPIM/dropfiles/output_files/
2. Import the XLSX files into your PIM system
3. The files will remain available until you upload new input files

The output files will remain in /output_files/ until you upload new files to /input_files/.

Best regards,
KatanaPIM Automation System
EOF
        
        # Send email using curl to Gmail SMTP
        curl -s --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
          --mail-from '${{ secrets.EMAIL_USER }}' \
          --mail-rcpt 'sajid.mbp@gmail.com' \
          --user "${{ secrets.EMAIL_USER }}:${{ secrets.EMAIL_APP_PASSWORD }}" \
          -T email_body.txt
        
        echo "📧 Completion email sent to sajid.mbp@gmail.com"

    - name: No new files notification
      if: steps.check-files.outputs.new_files == 'false'
      run: |
        echo "⏭️ No new files found in /input_files/. Skipping processing."
        echo "Next check in 15 minutes..."
