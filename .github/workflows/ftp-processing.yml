name: FTP File Processing
on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:  # Allow manual triggering

env:
  FTP_HOST: img.leenweb.app
  FTP_USER: support.leenweb.nl
  FTP_PASS: ${{ secrets.FTP_PASS }}
  EMAIL_USER: ${{ secrets.EMAIL_USER }}
  EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}

jobs:
  process-ftp-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests openpyxl pandas tqdm

    - name: Install FTP tools
      run: |
        sudo apt-get update
        sudo apt-get install -y lftp

    - name: Create directories
      run: |
        mkdir -p input_files output_files converted-files

    - name: Create lftp configuration
      run: |
        cat > .lftprc << EOF
        set ftp:ssl-allow no
        set ssl:verify-certificate no
        EOF

    - name: Check for new files on FTP
      id: check-files
      run: |
        # Get list of current files in input_files
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          ls -la
        " > current_files.txt
        
        echo "=== Files in /input_files ==="
        cat current_files.txt
        
        # Check if there are any NEW input files (not in processed folder)
        if grep -q -E "^(art.*in|atk.*in|mvm.*in|uic.*in|stc.*in|lev.*in)" current_files.txt; then
          echo "new_files=true" >> $GITHUB_OUTPUT
          echo "✅ New files detected - will process"
        else
          echo "new_files=false" >> $GITHUB_OUTPUT
          echo "❌ No new files found"
        fi

    - name: Download files from FTP
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        echo "📥 Downloading files from /input_files/..."
        
        # Download only the required processing files
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          mget art*in atk*in mvm*in uic*in stc*in lev*in
        "
        
        echo "=== Downloaded files ==="
        ls -la *.in

    - name: Archive previous output files to /output_files/processed
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        # Check if there are existing output files to archive
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /output_files
          ls -la
        " > output_check.txt
        
        echo "=== Current /output_files contents ==="
        cat output_check.txt
        
        # Check if there are any files/folders (excluding processed folder)
        if grep -q -v -E "^(drwx|total|processed)" output_check.txt; then
          echo "📦 Archiving previous output files to /output_files/processed/output_files_${TIMESTAMP}/"
          
          # Create processed directory structure
          lftp -c "
            set ftp:ssl-allow no
            set ssl:verify-certificate no
            open -u $FTP_USER,$FTP_PASS $FTP_HOST
            cd /output_files
            mkdir -p processed
            cd processed
            mkdir -p output_files_${TIMESTAMP}
          "
          
          # Move all files and folders from /output_files to archive (except processed folder)
          lftp -c "
            set ftp:ssl-allow no
            set ssl:verify-certificate no
            open -u $FTP_USER,$FTP_PASS $FTP_HOST
            cd /output_files
            glob -a mv * processed/output_files_${TIMESTAMP}/ 
          " || echo "Some files may already be moved"
          
          echo "✅ Previous output files archived to /output_files/processed/output_files_${TIMESTAMP}/"
        else
          echo "📭 No previous output files to archive"
        fi

    - name: Archive input files to /input_files/processed
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        echo "📦 Archiving input files to /input_files/processed/input_files_${TIMESTAMP}/"
        
        # Create processed directory structure
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          mkdir -p processed
          cd processed
          mkdir -p input_files_${TIMESTAMP}
        "
        
        # Move all processing files to archive (keep ART_DOCS folder)
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          glob -a mv art*in atk*in mvm*in uic*in stc*in lev*in processed/input_files_${TIMESTAMP}/ 
        " || echo "Some files may already be moved"
        
        echo "✅ Input files archived to /input_files/processed/input_files_${TIMESTAMP}/"

    - name: Run Python conversion script
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        echo "🔄 Running conversion script..."
        
        # List files to verify
        echo "=== Files available for processing ==="
        ls -la *.in
        
        # Run the conversion script (replace with your actual script name)
        python your_script_name.py
        
        echo "✅ Conversion completed successfully"
        
        # Show generated files
        echo "=== Generated output files ==="
        find converted-files -type f | head -20

    - name: Upload output files to FTP
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        echo "⬆️ Uploading output files to /output_files/"
        
        # Upload all converted files to /output_files directory
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /
          mirror -R -v ./converted-files/ /output_files/
        "
        
        echo "✅ New output files uploaded to /output_files/"

    - name: Send completion email
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        
        # Get list of processed files for the email
        PROCESSED_FILES=$(ls *.in 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "art1443in, atk1443in, mvm1443in, etc.")
        
        cat > email_body.txt << EOF
        Subject: 🚀 KatanaPIM Files Export Completed

        Hello,

        Your file conversion has been completed successfully!

        📊 PROCESSING SUMMARY:
        • Input files processed: $PROCESSED_FILES
        • Process completed: $(date)
        • Archive timestamp: ${TIMESTAMP}

        📁 FILE LOCATIONS:

        📍 CURRENT OUTPUT FILES (Ready for PIM Import):
        https://img.leenweb.app/output_files/

        The following folders are available for import:
        - https://img.leenweb.app/output_files/in/ (for INHOUSE)
        - https://img.leenweb.app/output_files/pw/ (for Pronto Wonen) 
        - https://img.leenweb.app/output_files/bs/ (for Baenks)
        - https://img.leenweb.app/output_files/pm/ (for Profijt Meubel)

        📍 ARCHIVED FILES:
        • Input files: /input_files/processed/input_files_${TIMESTAMP}/
        • Previous outputs: /output_files/processed/output_files_${TIMESTAMP}/

        🔗 IMPORT INSTRUCTIONS:
        1. Access the output files at the URLs above
        2. Import the XLSX files into your PIM system
        3. The files will remain available in /output_files/ until you upload new input files

        The output files will remain accessible until you upload new files to /input_files/.

        Best regards,
        KatanaPIM Automation System
        EOF
        
        # Send email using curl to Gmail SMTP
        curl -s --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
          --mail-from '${{ secrets.EMAIL_USER }}' \
          --mail-rcpt 'sajid.mbp@gmail.com' \
          --user "${{ secrets.EMAIL_USER }}:${{ secrets.EMAIL_APP_PASSWORD }}" \
          -T email_body.txt
        
        echo "📧 Completion email sent to sajid.mbp@gmail.com"

    - name: Clean up downloaded files
      if: steps.check-files.outputs.new_files == 'true'
      run: |
        echo "🧹 Cleaning up downloaded files..."
        rm -f *.in || true
        rm -rf input_files/ converted-files/ || true

    - name: No new files notification
      if: steps.check-files.outputs.new_files == 'false'
      run: |
        echo "⏭️ No new files found in /input_files/. Skipping processing."
        echo "Current /input_files contents:"
        lftp -c "
          set ftp:ssl-allow no
          set ssl:verify-certificate no
          open -u $FTP_USER,$FTP_PASS $FTP_HOST
          cd /input_files
          ls -la
        " || true
        echo "Next check in 15 minutes..."