name: FTP File Processing
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  process-ftp-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        pip install requests openpyxl pandas tqdm

    - name: Check for new input files
      id: check_files
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        try:
            ftps.cwd('/input_files')
            files = [f for f in ftps.nlst() if f not in ['.', '..', 'processed']]
            print(f'Found {len(files)} files: {files}')
            has_files = len(files) > 0
        except:
            has_files = False
            
        ftps.quit()
        print('new_files_found=' + str(has_files).lower() >> open('$GITHUB_OUTPUT', 'a'))
        "

    - name: Download input files
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        import os
        
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        os.makedirs('input_files', exist_ok=True)
        ftps.cwd('/input_files')
        
        for item in ftps.nlst():
            if item in ['.', '..', 'processed']:
                continue
            try:
                # Try to download as file
                with open(f'input_files/{item}', 'wb') as f:
                    ftps.retrbinary(f'RETR {item}', f.write)
                print(f'Downloaded: {item}')
            except:
                print(f'Skipped directory: {item}')
        
        ftps.quit()
        "

    - name: Create output directory if needed
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        
        try:
            ftps.cwd('/output_files')
            print('Output directory exists')
        except:
            ftps.mkd('/output_files')
            print('Created output directory')
        
        ftps.quit()
        "

    - name: Run conversion script
      if: steps.check_files.outputs.new_files_found == 'true'
      run: |
        cp -r input_files/* .
        python convert.py
        echo "Generated files:"
        find converted-files -type f

    - name: Upload output files
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        import os
        
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        ftps.cwd('/output_files')
        
        for root, dirs, files in os.walk('converted-files'):
            for file in files:
                local_path = os.path.join(root, file)
                remote_path = os.path.relpath(local_path, 'converted-files')
                
                with open(local_path, 'rb') as f:
                    ftps.storbinary(f'STOR {remote_path}', f)
                print(f'Uploaded: {remote_path}')
        
        ftps.quit()
        "

    - name: Archive input files
      if: steps.check_files.outputs.new_files_found == 'true'
      env:
        FTP_HOST: img.leenweb.app
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
      run: |
        python -c "
        from ftplib import FTP_TLS
        from datetime import datetime
        
        ftps = FTP_TLS('$FTP_HOST')
        ftps.login(user='$FTP_USER', passwd='$FTP_PASS')
        ftps.prot_p()
        ftps.cwd('/input_files')
        
        # Create processed directory
        try:
            ftps.mkd('processed')
        except:
            pass
        
        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
        archive_dir = f'processed/input_{timestamp}'
        
        try:
            ftps.mkd(archive_dir)
        except:
            pass
        
        # Move files to archive
        for item in ftps.nlst():
            if item in ['.', '..', 'processed']:
                continue
            try:
                ftps.rename(item, f'{archive_dir}/{item}')
                print(f'Archived: {item}')
            except Exception as e:
                print(f'Error archiving {item}: {e}')
        
        ftps.quit()
        "

    - name: Clean up
      if: always()
      run: |
        rm -rf input_files converted-files
        echo 'âœ… Cleaned up'